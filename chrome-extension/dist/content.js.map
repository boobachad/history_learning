{"version":3,"file":"content.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,YAAY,aAAa,cAAc;AACvG;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA,iBAAiB;AACjB,CAAC;AACS;AACV;AACA","sources":["webpack://chrome-extension/webpack/bootstrap","webpack://chrome-extension/webpack/runtime/make namespace object","webpack://chrome-extension/./src/content.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// content.ts\n// This script runs on every page and can interact with the DOM.\nconsole.log(\"[Content Script] Started.\");\n// Listen for messages from the extension\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === \"GET_PAGE_INFO\") {\n        const pageInfo = {\n            title: document.title,\n            url: window.location.href,\n            timestamp: new Date().toISOString()\n        };\n        sendResponse(pageInfo);\n    }\n    else if (message.type === \"GET_VIDEO_INFO\" && window.location.href.includes(\"youtube.com/watch\")) {\n        // Stub: In a real scenario, you'd scrape the video player for duration and current time\n        const videoElement = document.querySelector(\"video\");\n        let videoLength = 0;\n        let watchedLength = 0;\n        if (videoElement) {\n            videoLength = videoElement.duration || 0;\n            watchedLength = videoElement.currentTime || 0;\n            console.log(`[Content Script] Found video: Length=${videoLength}s, Watched=${watchedLength}s`);\n        }\n        else {\n            console.log(\"[Content Script] No video element found on YouTube page.\");\n        }\n        sendResponse({ videoLength, watchedLength });\n    }\n    return true; // Keep the message channel open for async response\n});\nexport {};\n// You can also inject scripts or interact with the DOM directly here\n// For example, to observe changes on the page or inject UI elements.\n"],"names":[],"sourceRoot":""}